{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","email","name","className","href","TodoInfo","todo","title","completed","id","cn","TodoList","todos","map","username","getUserById","userId","usersFromServer","find","todosWithUsers","maxId","Math","max","App","useState","setTodos","selectedUserId","setSelectedUserId","hasUserError","setHasUserError","newTodoTitle","setNewTodoTitle","hasTitleError","setHasTitleError","onSubmit","event","preventDefault","newTodo","currentTodos","addTodo","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.25b20741.chunk.js","sourcesContent":["import './UserInfo.scss';\nimport { User } from '../types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      { name }\n    </a>\n  );\n};\n","import './TodoInfo.scss';\nimport cn from 'classnames';\nimport { Todo } from '../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    title, completed, id, user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn(\n        'TodoInfo', {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[]\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport React, { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './components/types/Todo';\nimport { User } from './components/types/User';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUserById(userId: number): User | null {\n  return usersFromServer.find(user => user.id === userId)\n  || null;\n}\n\nconst todosWithUsers: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nconst maxId = Math.max(...todosWithUsers.map(todo => todo.id));\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(todosWithUsers);\n\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [hasUserError, setHasUserError] = useState(false);\n\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  const addTodo = (title: string, userId: number) => {\n    const newTodo = {\n      id: maxId + 1,\n      title,\n      userId,\n      completed: false,\n      user: getUserById(userId),\n    };\n\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n  };\n\n  const handleFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setHasTitleError(!newTodoTitle);\n    setHasUserError(!selectedUserId);\n\n    if (!newTodoTitle || !selectedUserId) {\n      return;\n    }\n\n    addTodo(newTodoTitle, selectedUserId);\n\n    setNewTodoTitle('');\n    setSelectedUserId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"field\">\n          <label>\n            Title:\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Please add title\"\n              value={newTodoTitle}\n              onChange={(event) => {\n                setHasTitleError(false);\n                setNewTodoTitle(event.target.value);\n              }}\n            />\n            {hasTitleError && (\n              <span className=\"error\">Please enter a title</span>\n            )}\n          </label>\n        </div>\n\n        <div className=\"field\">\n          <label>\n            User:\n            <select\n              data-cy=\"userSelect\"\n              value={selectedUserId}\n              onChange={(event) => {\n                setHasUserError(false);\n                setSelectedUserId(+event.target.value);\n              }}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n              {usersFromServer.map((user) => (\n                <option\n                  value={user.id}\n                  key={user.id}\n                >\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {hasUserError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}